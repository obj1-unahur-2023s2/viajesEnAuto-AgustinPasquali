import clientesRemiseria.*

describe "testing de Ana María"{
	test "Esta economicamente estable" {
	
		assert.that(anaMaria.estableEconomicamente())
	
	}
	test "Precio del km cuando esta economicamente estable"{
		assert.equals(30, anaMaria.precioPorKilometro())
	}
	test "No esta economicamente estable"{
		anaMaria.cambiarSituacionEconomica()
		assert.notThat(anaMaria.estableEconomicamente())	
	}
	test "Precio del km cuando **NO** esta economicamente estable"{
		anaMaria.cambiarSituacionEconomica()
		assert.equals(25, anaMaria.precioPorKilometro())
	}

}

describe "testin de Teresa"{
	test "El precio por kilometro sin modificaciones es 22"{
		assert.equals(22, teresa.precioPorKilometro())
	}
	
	test "El precio por kilometro se modifica correctamente a 30"{
		teresa.precioPorKilometro(30)
		assert.equals(30, teresa.precioPorKilometro())
	}
}

describe "Testing de Melina"{
	test "No puede trabajar para si misma"{
		assert.throwsExceptionWithMessage(
			"No se puede trabajar para si misma", 
			{melina.estaTrabajandoPara(melina)}
		)
	}
	test "El precio por km si trabaja para Ludmila es $15"{
		melina.estaTrabajandoPara(ludmila)
		assert.equals(15, melina.precioPorKilometro())
	}
	test "El precio por km si trabaja para Ana María es $27 si esta estable economicamente"{
		melina.estaTrabajandoPara(anaMaria)
		assert.equals(27, melina.precioPorKilometro())
	}
	test "El precio por km si trabaja para Ana María es $22 si no esta estable economicamente"{
		melina.estaTrabajandoPara(anaMaria)
		anaMaria.cambiarSituacionEconomica()
		assert.equals(22, melina.precioPorKilometro())
	}
	test "El precio por km si trabaja para Ana María es $22 si teresa no tuviera modificaciones"{
		melina.estaTrabajandoPara(teresa)
		assert.equals(19, melina.precioPorKilometro())
	}

}