import remiseras.*
import clientesRemiseria.*
describe "Testing de Roxana"{
	test "Un viaje de 10 km a ludmila cuesta $180"{
		assert.equals(180, roxana.precioViaje(ludmila, 10))
	}
	test "Un viaje de 10 km a Ana Maria cuesta 300"{
		assert.equals(300, roxana.precioViaje(anaMaria, 10))
	}
	test "Un viaje de 10 km a Teresa cuesta $220"{
			assert.equals(220, roxana.precioViaje(teresa, 10))
	}
	test "Un viaje de 2 km a ludmila cuesta $36"{
		assert.equals(36, roxana.precioViaje(ludmila, 2))
	}
	test "Un viaje de 2 km a Ana Maria cuesta $60"{
		assert.equals(60, roxana.precioViaje(anaMaria, 2))
	}
	test "Un viaje de 2 km a Teresa cuesta $44"{
			assert.equals(44, roxana.precioViaje(teresa, 2))
	}
	
}

describe "Testing de Gabriela"{
	test "Un viaje de 10 km a ludmila cuesta $216"{
		assert.equals(216, gabriela.precioViaje(ludmila, 10))
	}
	test "Un viaje de 10 km a Ana Maria cuesta 360"{
		assert.equals(360, gabriela.precioViaje(anaMaria, 10))
	}
	test "Un viaje de 10 km a Teresa cuesta $264"{
			assert.equals(264, gabriela.precioViaje(teresa, 10))
	}
	test "Un viaje de 2 km a ludmila cuesta $43,20"{
		assert.equals(43.20, gabriela.precioViaje(ludmila, 2))
	}
	test "Un viaje de 2 km a Ana Maria cuesta $72"{
		assert.equals(72, gabriela.precioViaje(anaMaria, 2))
	}
	test "Un viaje de 2 km a Teresa cuesta $52,80"{
			assert.equals(52.80, gabriela.precioViaje(teresa, 2))
	}
	
}

describe "Testing de Mariela"{
	test "Un viaje de 10 km a ludmila cuesta $180"{
		assert.equals(180, mariela.precioViaje(ludmila, 10))
	}
	test "Un viaje de 10 km a Ana Maria cuesta 300"{
		assert.equals(300, mariela.precioViaje(anaMaria, 10))
	}
	test "Un viaje de 10 km a Teresa cuesta $220"{
			assert.equals(220, mariela.precioViaje(teresa, 10))
	}
	test "Un viaje de 2 km a ludmila cuesta $50"{
		assert.equals(50, mariela.precioViaje(ludmila, 2))
	}
	test "Un viaje de 2 km a Ana Maria cuesta $60"{
		assert.equals(60, mariela.precioViaje(anaMaria, 2))
	}
	test "Un viaje de 2 km a Teresa cuesta $50"{
			assert.equals(50, mariela.precioViaje(teresa, 2))
	}
}

describe "Testing de Juana"{
	test "Un viaje de 10 km a ludmila cuesta $200"{
		assert.equals(200, juana.precioViaje(ludmila, 10))
	}
	test "Un viaje de 10 km a Ana Maria cuesta $200"{
		assert.equals(200, juana.precioViaje(anaMaria, 10))
	}
	test "Un viaje de 10 km a Teresa cuesta $200"{
			assert.equals(200, juana.precioViaje(teresa, 10))
	}	
	test "Un viaje de 2 km a ludmila cuesta $100"{
		assert.equals(100, juana.precioViaje(ludmila, 2))
	}
	test "Un viaje de 2 km a Ana Maria cuesta $100"{
		assert.equals(100, juana.precioViaje(anaMaria, 2))
	}
	test "Un viaje de 2 km a Teresa cuesta $100"{
			assert.equals(100, juana.precioViaje(teresa, 2))
	}
}

describe "Testing de Luc√≠a"{
	test "No se puede reemplazar a si misma"{
		assert.throwsExceptionWithMessage(
			"No se puede reemplazar a si mismo", 
			{lucia.estaReemplazandoA(lucia)}
		)
	}
	test "Cobra lo mismo que Roxana a Ludmila en un viaje de 10 km si la reemplaza"{
		lucia.estaReemplazandoA(roxana)
		assert.equals(180, lucia.precioViaje(ludmila, 10))
	}
	test "Cobra lo mismo que Gabriela a Ludmila en un viaje de 10 km si la reemplaza"{
		lucia.estaReemplazandoA(gabriela)
		assert.equals(216, lucia.precioViaje(ludmila, 10))
	}
	test "Cobra lo mismo que Mariela a Ludmila en un viaje de 10 km si la reemplaza"{
		lucia.estaReemplazandoA(mariela)
		assert.equals(180, lucia.precioViaje(ludmila, 10))
	}
	test "Cobra lo mismo que Juana a Ludmila en un viaje de 10 km si la reemplaza"{
		lucia.estaReemplazandoA(juana)
		assert.equals(200, lucia.precioViaje(ludmila, 10))
	}
	
}